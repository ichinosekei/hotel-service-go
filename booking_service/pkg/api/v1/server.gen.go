// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Booking defines model for Booking.
type Booking struct {
	// BookingId Unique ID of the booking.
	BookingId *string `json:"bookingId,omitempty"`

	// CheckInDate Check-in date of the booking.
	CheckInDate *string `json:"checkInDate,omitempty"`

	// ClientFullName Full name of the client.
	ClientFullName *string `json:"clientFullName,omitempty"`

	// ClientPhoneNumber Phone number of the client.
	ClientPhoneNumber *string `json:"clientPhoneNumber,omitempty"`

	// Duration Duration of the booking in nights.
	Duration *int `json:"duration,omitempty"`

	// HotelId id of the hotel.
	HotelId *int `json:"hotelId,omitempty"`

	// RoomNumber Room number in the hotel.
	RoomNumber *int `json:"roomNumber,omitempty"`

	// TotalPrice Total price of the booking.
	TotalPrice *float32 `json:"totalPrice,omitempty"`
}

// BookingRequest defines model for BookingRequest.
type BookingRequest struct {
	// CheckInDate Check-in date of the booking.
	CheckInDate *string `json:"checkInDate,omitempty"`

	// ClientFullName Full name of the client.
	ClientFullName *string `json:"clientFullName,omitempty"`

	// ClientPhoneNumber Phone number of the client.
	ClientPhoneNumber *string `json:"clientPhoneNumber,omitempty"`

	// Duration Duration of the booking in nights.
	Duration *int `json:"duration,omitempty"`

	// HotelId Id of the hotel.
	HotelId *int `json:"hotelId,omitempty"`

	// RoomNumber Room number in the hotel.
	RoomNumber *int `json:"roomNumber,omitempty"`
}

// GetApiV1BookingsClientParams defines parameters for GetApiV1BookingsClient.
type GetApiV1BookingsClientParams struct {
	// PhoneNumber The phone number of the client.
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber"`
}

// GetApiV1BookingsHotelParams defines parameters for GetApiV1BookingsHotel.
type GetApiV1BookingsHotelParams struct {
	// HotelId The unique ID of the hotel.
	HotelId int `form:"hotelId" json:"hotelId"`
}

// PostApiV1BookingsJSONRequestBody defines body for PostApiV1Bookings for application/json ContentType.
type PostApiV1BookingsJSONRequestBody = BookingRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a booking
	// (POST /api/v1/bookings)
	PostApiV1Bookings(ctx echo.Context) error
	// Get client bookings
	// (GET /api/v1/bookings/client)
	GetApiV1BookingsClient(ctx echo.Context, params GetApiV1BookingsClientParams) error
	// Get bookings for a specific hotel
	// (GET /api/v1/bookings/hotel)
	GetApiV1BookingsHotel(ctx echo.Context, params GetApiV1BookingsHotelParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiV1Bookings converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Bookings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Bookings(ctx)
	return err
}

// GetApiV1BookingsClient converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1BookingsClient(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1BookingsClientParams
	// ------------- Required query parameter "phoneNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "phoneNumber", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phoneNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1BookingsClient(ctx, params)
	return err
}

// GetApiV1BookingsHotel converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1BookingsHotel(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1BookingsHotelParams
	// ------------- Required query parameter "hotelId" -------------

	err = runtime.BindQueryParameter("form", true, true, "hotelId", ctx.QueryParams(), &params.HotelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hotelId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1BookingsHotel(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/bookings", wrapper.PostApiV1Bookings)
	router.GET(baseURL+"/api/v1/bookings/client", wrapper.GetApiV1BookingsClient)
	router.GET(baseURL+"/api/v1/bookings/hotel", wrapper.GetApiV1BookingsHotel)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yWzXIbNwzHX4XD9riW5CY9VDc7blId6tG4H5dOpkMtIQnJLkmDWCWajN69A3J3I2k3",
	"jpvUnR56kwjyDwL4AdwPuvR18A4cRz3/oGO5hdqkn9fev0W3kZ+BfABihGRYZcPCyh8LsSQMjN7puf7N",
	"4X0DanGj/FrxFlS7d6ILzfsAeq4jk6geCl1uoXy7cDeGYaj0QowX6JQ1DI9SqxAcv2yq6tbUI4JiUc7U",
	"vVg+8IDWcusd3Db1Cmgol4zKJesjFG1DJp88F7ppLWcxKnTK4WbL8UgPHcMGSAS3nqEaKwHaTiltGT9N",
	"3tefiuzO+7oLDN3nlNizqZaE5UjKfxWbCmIcqeDaU21Yz/W68oY/imfX+nDoV/zqDZQs3lom7+C+gchD",
	"NP9H6imQWvybSA3LLkvo1n6oe7VcqLUnVRtnNhJhTpcyzmYHXeg5YuRKdFuI1C9AO0HzarnQhd4Bxax6",
	"OZlNZhKSD+BMQD3XzyazyTNd6GB4m0CbmoDT3eW0008o+ozkGXUEgptRDt71lXiHvE1pCOR3aMEqC2yw",
	"SvcUoFP9pBZ66SNfBfz98rpzVWjK/F97u0/Ue8fgkm8TQoVlOj19EzMceabLr28J1nquv5l+HPrTduJP",
	"z1orZV38IIHVc6YG0kIM3sXcbN/NLv9p79ntaQK7csWmLCHGdVNVe1WmrNqJlOn5bDZM+7Wxqo1FXaif",
	"MUbR8MLfzlRoFbrQsIwC04r8MFI779YVlqLQ3cJUBMbuFbzHyDHRJ3Xc4A6ckh5I8KUJQ8ZtIIl/P3bD",
	"hWMgZ6rEIZD6kciTulBXTjUO3gcoGayCtOrLsiFK8R4KHZu6NrQ/hmvV568YsDnNXSE32MAIoXfAhLAT",
	"mQojS693R1N8RsUAJa6x7PprZSJY5VMnI6lwNLiGAL+CU35f5NtIM5GpgYGinv8xeDukOR4ciCjb7hug",
	"vS60SwNah6P5eo5vcYRi//akA8Ppeng9YH32t1hHhjo+GvrevyEy+7EmuOpL05WgH2xf3AGnZUsyz4cy",
	"t57VS984qy7UrT8mQ9ZO+R8oPhn4r4DPMzHOfnoGvgL99hnpgEeOanHzech/Sm4fwXhz/sXcP4xjfHdP",
	"9ENsDx7U/y7LJ7mW4NtBA7ZLwxfDnesmpfo6sMdu9KRUf2r0ZpBTOmPyMEbU+aeNcKvko0UXuqFKz3XX",
	"GX/GvEUfXh/+CgAA//+z/yxZBQ4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Booking defines model for Booking.
type Booking struct {
	// BookingId Unique ID of the booking.
	BookingId *string `json:"bookingId,omitempty"`

	// CheckInDate Check-in date of the booking.
	CheckInDate *string `json:"checkInDate,omitempty"`

	// CheckOutDate Check-in date of the booking.
	CheckOutDate *string `json:"checkOutDate,omitempty"`

	// ClientFullName Full name of the client.
	ClientFullName *string `json:"clientFullName,omitempty"`

	// ClientPhoneNumber Phone number of the client.
	ClientPhoneNumber *string `json:"clientPhoneNumber,omitempty"`

	// HotelId id of the hotel.
	HotelId *int `json:"hotelId,omitempty"`

	// RoomNumber Room number in the hotel.
	RoomNumber *int `json:"roomNumber,omitempty"`

	// TotalPrice Total price of the booking.
	TotalPrice *float64 `json:"totalPrice,omitempty"`
}

// BookingRequest defines model for BookingRequest.
type BookingRequest struct {
	// CheckInDate Check-in date of the booking.
	CheckInDate *string `json:"checkInDate,omitempty"`

	// CheckOutDate Check-in date of the booking.
	CheckOutDate *string `json:"checkOutDate,omitempty"`

	// ClientFullName Full name of the client.
	ClientFullName *string `json:"clientFullName,omitempty"`

	// ClientPhoneNumber Phone number of the client.
	ClientPhoneNumber *string `json:"clientPhoneNumber,omitempty"`

	// HotelId Id of the hotel.
	HotelId *int `json:"hotelId,omitempty"`

	// RoomNumber Room number in the hotel.
	RoomNumber *int `json:"roomNumber,omitempty"`
}

// GetApiV1BookingsClientParams defines parameters for GetApiV1BookingsClient.
type GetApiV1BookingsClientParams struct {
	// PhoneNumber The phone number of the client.
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber"`
}

// GetApiV1BookingsHotelParams defines parameters for GetApiV1BookingsHotel.
type GetApiV1BookingsHotelParams struct {
	// HotelId The unique ID of the hotel.
	HotelId int `form:"hotelId" json:"hotelId"`
}

// PostApiV1BookingsJSONRequestBody defines body for PostApiV1Bookings for application/json ContentType.
type PostApiV1BookingsJSONRequestBody = BookingRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a booking
	// (POST /api/v1/bookings)
	PostApiV1Bookings(ctx echo.Context) error
	// Get client bookings
	// (GET /api/v1/bookings/client)
	GetApiV1BookingsClient(ctx echo.Context, params GetApiV1BookingsClientParams) error
	// Get bookings for a specific hotel
	// (GET /api/v1/bookings/hotel)
	GetApiV1BookingsHotel(ctx echo.Context, params GetApiV1BookingsHotelParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiV1Bookings converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Bookings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Bookings(ctx)
	return err
}

// GetApiV1BookingsClient converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1BookingsClient(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1BookingsClientParams
	// ------------- Required query parameter "phoneNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "phoneNumber", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phoneNumber: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1BookingsClient(ctx, params)
	return err
}

// GetApiV1BookingsHotel converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1BookingsHotel(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1BookingsHotelParams
	// ------------- Required query parameter "hotelId" -------------

	err = runtime.BindQueryParameter("form", true, true, "hotelId", ctx.QueryParams(), &params.HotelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hotelId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1BookingsHotel(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/bookings", wrapper.PostApiV1Bookings)
	router.GET(baseURL+"/api/v1/bookings/client", wrapper.GetApiV1BookingsClient)
	router.GET(baseURL+"/api/v1/bookings/hotel", wrapper.GetApiV1BookingsHotel)

}
